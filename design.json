[
  {
    "id": "debug",
    "title": "Debug",
    "version": "1.0.0",
    "color": "#5D9CEC",
    "icon": "file-text-o",
    "outputs": [],
    "inputs": [
      {
        "color": "#666D77",
        "description": "ctx"
      }
    ],
    "options": {
      "filename": "",
      "append": true,
      "delimiter": "\\n"
    },
    "readme": "This node logs the incoming message to the console"
  },
  {
    "id": "filereader",
    "title": "File Reader",
    "version": "1.0.0",
    "color": "#656D78",
    "icon": "file-text-o",
    "outputs": [
      {
        "color": "#6BAD57",
        "description": "String"
      }
    ],
    "inputs": [
      {
        "color": "#666D77",
        "description": "Expects a Path Object"
      }
    ],
    "options": {
      "filename": "",
      "append": true,
      "delimiter": "\\n"
    },
    "readme": "# File Reader\n\nThis component reads a file from file system.\n\n## Input\nIf incomming object has a path property then filename option is ignored.\n\nExample of incomming object\n```javascript\n{\npath: '/public/robots.txt',\ntype: 'text', // optional, default text\nencoding: 'utf8' // optional, default utf8\n}\n```\n",
    "html": "<div class=\"padding\">\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div data-jc=\"textbox\" data-jc-path=\"filename\" data-jc-config=\"placeholder:@(/public/robots.txt)\">@(Filename)</div>\n    <div class=\"help m\">@(Filename relative to the application root.)</div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div data-jc=\"dropdown\" data-jc-path=\"type\" data-jc-config=\"items:Buffer|buffer,Text|text\">@(Read as)</div>\n  </div>\n  <div class=\"col-md-6\">\n    <div data-jc=\"textbox\" data-jc-path=\"encoding\" data-jc-config=\"placeholder:utf8\">@(Encoding) (@(default 'utf8'))</div>\n    <div class=\"help m\">@(Only for 'Read as text')</div>\n  </div>\n</div>\n</div>"
  },
  {
    "id": "httpresponse",
    "title": "HTTP Response",
    "version": "1.0.0",
    "color": "#5D9CEC",
    "icon": "file-text-o",
    "outputs": [],
    "inputs": [
      {
        "color": "#666D77",
        "description": "String"
      }
    ],
    "options": {
      "filename": "",
      "append": true,
      "delimiter": "\\n"
    }
  },
  {
    "id": "httproute",
    "title": "HTTP Route",
    "group": "HTTP",
    "version": "1.0.0",
    "color": "#5D9CEC",
    "icon": "globe",
    "input": true,
    "output": 1,
    "options": {
      "method": "GET",
      "url": "",
      "size": 5,
      "cacheexpire": "5 minutes",
      "cachepolicy": 0,
      "timeout": 5
    },
    "props": {
      "method": {
        "type": "enum",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "PATCH",
          "OPTIONS"
        ],
        "default": "GET"
      },
      "url": {
        "type": "string",
        "default": ""
      },
      "size": {
        "type": "number",
        "default": 5
      },
      "cacheexpire": {
        "type": "number",
        "default": "5 minutes"
      },
      "cachepolicy": {
        "type": "number",
        "default": 0
      },
      "timeout": {
        "type": "number",
        "default": 5
      }
    },
    "readme": "\n  If one of the outputs is disabled then automatic responce with code \"503 service unavailable\" is sent.\n\n  When a request comes in bellow object is available at `flowdata.data`:\n  \n  ```javascript\n  {\n\t  params: { id: '1' },     // params for dynamic routes, e.g. /test/{id}\n\t  query: { msg: 'Hello' }, // parsed query string, e.g. /test/1?msg=Hello\n\t  body: { test: 'OK' },    // object if json requests otherwise string\n\t  headers: {},             // headers data\n\t  session: {},             // session data\n\t  user: {},                // user data\n\t  files: [],               // uploaded files\n\t  url: '/users/',          // a relative URL address\n\t  referrer: '/',           // referrer\n\t  mobile: false,           // determines mobile device\n\t  robot: false,            // determines search robots/crawlsers\n\t  language: 'en'           // determines language\n  }\n  ```\n  ",
    "outputs": [
      {
        "color": "#6BAD57",
        "description": "raw data"
      },
      {
        "color": "#F6BB42",
        "description": "cached data"
      }
    ],
    "inputs": []
  },
  {
    "id": "input",
    "title": "Input",
    "version": "1.0.0",
    "color": "#5D9CEC",
    "icon": "file-text-o",
    "outputs": [],
    "inputs": [
      {
        "color": "#666D77",
        "description": "ctx"
      }
    ],
    "options": {
      "key": ""
    },
    "readme": "This node passes a global variable"
  },
  {
    "id": "restproxy",
    "title": "Proxy",
    "group": "REST",
    "color": "#6B9CE6",
    "outputs": [
      {
        "id": 0,
        "color": "#6BAD57",
        "description": "first output contains a __response__"
      },
      {
        "id": 1,
        "color": "#F6BB42",
        "description": "second output contains received data"
      },
      {
        "id": 2,
        "color": "#666D77",
        "description": "third output contains a average time of duration `Number`"
      }
    ],
    "author": "Jelle",
    "icon": "globe",
    "version": "1.0.1",
    "cloning": false,
    "options": {
      "method": "GET",
      "url": "",
      "target": "",
      "headersreq": true,
      "headersres": false,
      "nodns": false,
      "auth": false,
      "middleware": [],
      "length": 5,
      "respond": false,
      "timeout": 5,
      "cacheexpire": "5 minutes",
      "cachepolicy": 0,
      "duration": false
    },
    "readme": "This component creates a REST proxy between local endpoint and external API. Proxy supports dynamic arguments between URL addresses via `{key}` markup (keys must be same)."
  },
  {
    "id": "restresponse",
    "title": "HTTP Response",
    "version": "1.0.0",
    "color": "#5D9CEC",
    "icon": "file-text-o",
    "outputs": [],
    "inputs": [
      {
        "color": "#666D77",
        "description": "ctx"
      }
    ],
    "options": {
      "filename": "",
      "append": true,
      "delimiter": "\\n"
    }
  },
  {
    "id": "restproxy",
    "title": "Proxy",
    "group": "REST",
    "color": "#6B9CE6",
    "input": 0,
    "outputs": [
      {
        "id": 0,
        "color": "#6BAD57",
        "description": "first output contains a __response__ - disabling this output will cause automatic response with code \"503 service unavailable\""
      },
      {
        "id": 1,
        "color": "#F6BB42",
        "description": "second output contains received data"
      },
      {
        "id": 2,
        "color": "#666D77",
        "description": "third output contains a average time of duration `Number`"
      }
    ],
    "author": "Jelle",
    "icon": "globe",
    "version": "1.0.1",
    "cloning": false,
    "options": {
      "method": "GET",
      "url": "",
      "target": "",
      "headersreq": true,
      "headersres": false,
      "nodns": false,
      "auth": false,
      "middleware": [],
      "length": 5,
      "respond": false,
      "timeout": 5,
      "cacheexpire": "5 minutes",
      "cachepolicy": 0,
      "duration": false
    },
    "readme": "# REST: Proxy\n\n  This component creates a REST proxy between local endpoint and external API. Proxy supports dynamic arguments between URL addresses via `{key}` markup (keys must be same).\n  \n  __Outputs__:\n  \n  - first output contains a __response__\n  - second output contains received data\n  - third output contains a average time of duration `Number`",
    "html": "TODO"
  },
  {
    "id": "wsservercore",
    "title": "wsservercore",
    "version": "1.0.0",
    "color": "#656D78",
    "options": {
      "enabled": true
    },
    "inputs": [
      {
        "color": "#6BAD57",
        "description": "targetRuntime"
      }
    ],
    "outputs": [],
    "readme": "Core Ws monitoring server"
  },
  {
    "id": "wsservercorestats",
    "title": "wsservercore",
    "version": "1.0.0",
    "color": "#656D78",
    "options": {
      "enabled": true
    },
    "inputs": [
      {
        "color": "#6BAD57",
        "description": "targetRuntime"
      }
    ],
    "outputs": [],
    "readme": "Core Ws monitoring server"
  }
]