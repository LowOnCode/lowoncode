#! /usr/bin/env node

const program = require('commander')
const lowoncode = require('../index') // require('@lowoncode/runtime')

const validate = design => {
  var schema = require('../schemas/design.js')
  var Ajv = require('ajv')
  var ajv = new Ajv() // options can be passed, e.g. {allErrors: true}
  var validate = ajv.compile(schema)
  // var valid = validate(design)
  // if (!valid) {
  //   // console.log(validate.errors)
  //   throw validate.errors
  // }
  return validate.errors
}

// const loadFromRemote = async ({
//   port,
//   designFile
// } = {}) => {
//   // set global env for PORT (IMPROVE)
//   if (port !== undefined) process.env.PORT = port

//   // Not our business but sometimes needed
//   // process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0

//   if (!designFile) {
//     throw new Error('Please set the DESIGN env!')
//   }

//   // ==========
//   // Load design file: local or remote
//   // ==========
//   console.log(`Fetching design from : ${designUrl}`)
//   const axios = require('axios')
//   const DESIGN_ID = process.env.DESIGN_ID || '5d98e3a19a33d6001711aaec' // < Remove defaults
//   const DESIGN_SECRET = process.env.DESIGN_SECRET || 'supersecret'
//   const designUrl = `http://localhost:1337/designs/${DESIGN_ID}/${DESIGN_SECRET}`
//   const design = await axios.get(designUrl).then(resp => resp.data)

//   // Debug
//   console.log(`...done. Design contains ${data.nodes.length} nodes`)

//   // All good, start server
//   serve(data)
// }

const loadFromFile = async ({
  port,
  designFile,
  componentDirectory,
  monitor,
  strict = false
} = {}) => {
  // set global env for PORT (IMPROVE)
  if (port !== undefined) process.env.PORT = port

  // Load design file
  console.log(`Loading design from : ${designFile}`)
  const design = await lowoncode.load(designFile)

  // Validate
  const errors = validate(design)
  if (errors) {
    console.log(errors)
    return // kill process
  }

  // Debug
  console.log(`...done. Design contains ${design.nodes.length} nodes`)

  // ==============
  // All good, start server
  // ==============
  // Create a runtime instance
  const runtime = lowoncode.create({}, {
    strict
  })

  // Load components
  await runtime.loadComponents(componentDirectory)

  // Load core components
  // await runtime.loadComponents(`${__dirname}/../components`)

  // Start the engine
  await runtime.run(design)

  // (Optional) Start monitor on our design
  if (monitor) {
    await lowoncode.start(runtime, {
      onUpdate (design) {
        console.log(`Saving design to file: ${designFile}`)
        // console.log(design)
        lowoncode.save(design, designFile)
      }
    })
  }

  // REPL
  const repl = require('repl')

  repl.start('> ').context.design = design
  const r = repl.start('> ')
  r.context.design = design
  r.context.designFile = designFile
  r.context.runtime = runtime
  // Alias
  r.context.c = runtime.allComponents
}

program
  // .requiredOption('-f, --file', 'specify design file', 'design.json')
  .version('0.0.1', '-v, --version', 'outputs the version')
  .option('<file>', 'design file', './design.json')
  .option('-p, --port <port>', 'set port', 5000)
  .option('-m, --monitor', 'enables monitor')
  .option('-s, --strict', 'enable strict modus, quit the process on faults')
  .option('-c, --components <components>', 'specify components directory', './components')
  .parse(process.argv)

// console.log(`Cwd: ${process.cwd()}`)

loadFromFile({
  port: program.port,
  designFile: `${process.cwd()}/${program.args[0]}`,
  componentDirectory: `${process.cwd()}/${program.components}`,
  monitor: program.monitor,
  strict: program.strict
})
